<Type Name="GetItemType" FullName="ExchangeWebServices.GetItemType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="939f9ff0a171878d90e41f34a8a6c46ac8456862" />
    <Meta Name="ms.sourcegitcommit" Value="09f9993d313d1e3ec77e21f70573b3fced6eea2e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20610429" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GetItemType : ExchangeWebServices.BaseRequestType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GetItemType extends ExchangeWebServices.BaseRequestType" />
  <TypeSignature Language="DocId" Value="T:ExchangeWebServices.GetItemType" />
  <TypeSignature Language="VB.NET" Value="Public Class GetItemType&#xA;Inherits BaseRequestType" />
  <TypeSignature Language="C++ CLI" Value="public ref class GetItemType : ExchangeWebServices::BaseRequestType" />
  <AssemblyInfo>
    <AssemblyName>EWS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ExchangeWebServices.BaseRequestType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("code")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlType(Namespace="http://schemas.microsoft.com/exchange/services/2006/messages")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2e75b-101">
        <see cref="T:ExchangeWebServices.GetItemType" /> Класс представляет запрос на получение элементов из почтового ящика в базе данных Exchange.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e75b-101">The <see cref="T:ExchangeWebServices.GetItemType" /> class represents a request to get items from a mailbox in the Exchange database.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="2e75b-102">Операции GetItem и FindItem <para>предоставления следующего набора данных. Операции GetItem используется для получения элементов после их найти с помощью операции FindItem, GetEvents и SyncFolderItems.</para><para>GetItem возвращает дополнительные свойства, которые не возвращены с FindItem. В следующей таблице показаны свойства не возвращаемые FindItem, но возвращаются GetItem.</para><list type="table"><item><term>Вложения [Ex15WebSvcsOtherRef]</term></item><item><term>категорий [Ex15WebSvcsOtherRef]</term></item><item><term>ReplyTo</term></item><item><term>Body</term></item><item><term>CcRecipients</term></item><item><term>ResponseObjects</term></item><item><term>BccRecipients</term></item><item><term>InternetMessageHeaders</term></item><item><term> ToRecipients</term></item></list><para /></span>
      <span class="sxs-lookup">
        <span data-stu-id="2e75b-102">
          <para>The GetItem and FindItem operations provide a similar set of information. The GetItem operation is used to get items after they have been found by using FindItem, GetEvents, or SyncFolderItems operations.</para>
          <para>GetItem returns additional properties that are not returned by FindItem. The following table shows properties not returned by FindItem but are returned by GetItem.</para>
          <list type="table">
            <item>
              <term>Attachments[Ex15WebSvcsOtherRef]</term>
            </item>
            <item>
              <term>Categories[Ex15WebSvcsOtherRef]</term>
            </item>
            <item>
              <term>ReplyTo</term>
            </item>
            <item>
              <term>Body</term>
            </item>
            <item>
              <term>CcRecipients</term>
            </item>
            <item>
              <term>ResponseObjects</term>
            </item>
            <item>
              <term>BccRecipients</term>
            </item>
            <item>
              <term>InternetMessageHeaders</term>
            </item>
            <item>
              <term>ToRecipients</term>
            </item>
          </list>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="2e75b-103">
        <para>Следующий пример показывает способ получения двух элементов из базы данных Exchange. Запрос использует фигуры ответа по умолчанию с помощью свойства чувствительность возвращается как дополнительные свойства. Ответ проверяется на наличие сообщений электронной почты и элементы календаря. Необходимо учитывать, если только свойства, которые доступны содержатся в базе <see cref="T:ExchangeWebServices.ItemType" /> класса приведения для соответствующего типа можно пропустить.</para>
        <code>static void GetItem(ExchangeServiceBinding esb)
{ 
    // Create the request.
    GetItemType request = new GetItemType();

    // Create the response shape.
    ItemResponseShapeType responseShape = new ItemResponseShapeType();
    responseShape.BodyType = BodyTypeResponseType.Text;
    responseShape.BodyTypeSpecified = true;
    responseShape.BaseShape = DefaultShapeNamesType.Default;
    // Add more properties to the request.
    PathToUnindexedFieldType[] sensitivity = new PathToUnindexedFieldType[1];
    sensitivity[0] = new PathToUnindexedFieldType();
    sensitivity[0].FieldURI = UnindexedFieldURIType.itemSensitivity;
    responseShape.AdditionalProperties = sensitivity;
    // Add the response shape to the request.
    request.ItemShape = responseShape;

    // Identify the items to get.
    ItemIdType[] items = new ItemIdType[2];
    items[0] = new ItemIdType();
    items[0].Id = "AAAlAE1BQG1";
    items[0].ChangeKey = "DwAAABYAAAA";
    items[1] = new ItemIdType();
    items[1].Id = "AAAlAE1BQG1";
    items[1].ChangeKey = "DwAAABYAAAA";

    // Add items to the request.
    request.ItemIds = items;

    try
    {
        // Send the request and get the response.
        GetItemResponseType resp = esb.GetItem(request);
        ArrayOfResponseMessagesType aormt = resp.ResponseMessages;
        ResponseMessageType[] rmta = aormt.Items;

        foreach (ResponseMessageType rmt in rmta)
        {
            ItemInfoResponseMessageType iirmt = (rmt as ItemInfoResponseMessageType);
            ArrayOfRealItemsType aorit = iirmt.Items;
            ItemType[] myItems = aorit.Items;
            
            // Determine the type for each item and cast to the approriate type.
            foreach (ItemType it in myItems)
            {
                // Check whether it is an e-mail.
                if (it is MessageType)
                {
                    MessageType message = (it as MessageType);
                }
                // Determine whether it is a calendar item.
                else if (it is CalendarItemType)
                {
                    CalendarItemType calendar = (it as CalendarItemType);
                }
                else 
                {
                    // Check for other item types.
                }
            }
        }
    }
    catch (Exception e)
    {
        throw new Exception("GetItem failed");
    }
}</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="2e75b-103">
          <para>The following example shows you how to get two items from the Exchange database. The request uses the default response shape with the Sensitivity property returned as an additional property. The response is checked for e-mail messages and calendar items. Be aware that if the only properties that are accessed are contained in the base <see cref="T:ExchangeWebServices.ItemType" /> class, casting to the appropriate type may not be necessary.</para>
          <code>static void GetItem(ExchangeServiceBinding esb)
{ 
    // Create the request.
    GetItemType request = new GetItemType();

    // Create the response shape.
    ItemResponseShapeType responseShape = new ItemResponseShapeType();
    responseShape.BodyType = BodyTypeResponseType.Text;
    responseShape.BodyTypeSpecified = true;
    responseShape.BaseShape = DefaultShapeNamesType.Default;
    // Add more properties to the request.
    PathToUnindexedFieldType[] sensitivity = new PathToUnindexedFieldType[1];
    sensitivity[0] = new PathToUnindexedFieldType();
    sensitivity[0].FieldURI = UnindexedFieldURIType.itemSensitivity;
    responseShape.AdditionalProperties = sensitivity;
    // Add the response shape to the request.
    request.ItemShape = responseShape;

    // Identify the items to get.
    ItemIdType[] items = new ItemIdType[2];
    items[0] = new ItemIdType();
    items[0].Id = "AAAlAE1BQG1";
    items[0].ChangeKey = "DwAAABYAAAA";
    items[1] = new ItemIdType();
    items[1].Id = "AAAlAE1BQG1";
    items[1].ChangeKey = "DwAAABYAAAA";

    // Add items to the request.
    request.ItemIds = items;

    try
    {
        // Send the request and get the response.
        GetItemResponseType resp = esb.GetItem(request);
        ArrayOfResponseMessagesType aormt = resp.ResponseMessages;
        ResponseMessageType[] rmta = aormt.Items;

        foreach (ResponseMessageType rmt in rmta)
        {
            ItemInfoResponseMessageType iirmt = (rmt as ItemInfoResponseMessageType);
            ArrayOfRealItemsType aorit = iirmt.Items;
            ItemType[] myItems = aorit.Items;
            
            // Determine the type for each item and cast to the approriate type.
            foreach (ItemType it in myItems)
            {
                // Check whether it is an e-mail.
                if (it is MessageType)
                {
                    MessageType message = (it as MessageType);
                }
                // Determine whether it is a calendar item.
                else if (it is CalendarItemType)
                {
                    CalendarItemType calendar = (it as CalendarItemType);
                }
                else 
                {
                    // Check for other item types.
                }
            }
        }
    }
    catch (Exception e)
    {
        throw new Exception("GetItem failed");
    }
}</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GetItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ExchangeWebServices.GetItemType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GetItemType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EWS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e75b-104">
            <see cref="T:ExchangeWebServices.GetItemType" /> Конструктор инициализирует новый экземпляр объекта <see cref="T:ExchangeWebServices.GetItemType" /> класса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-104">The <see cref="T:ExchangeWebServices.GetItemType" /> constructor initializes a new instance of the <see cref="T:ExchangeWebServices.GetItemType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemIds">
      <MemberSignature Language="C#" Value="public ExchangeWebServices.BaseItemIdType[] ItemIds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ExchangeWebServices.BaseItemIdType[] ItemIds" />
      <MemberSignature Language="DocId" Value="P:ExchangeWebServices.GetItemType.ItemIds" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemIds As BaseItemIdType()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;ExchangeWebServices::BaseItemIdType ^&gt; ^ ItemIds { cli::array &lt;ExchangeWebServices::BaseItemIdType ^&gt; ^ get(); void set(cli::array &lt;ExchangeWebServices::BaseItemIdType ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EWS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlArrayItem("RecurringMasterItemId", typeof(ExchangeWebServices.RecurringMasterItemIdType), IsNullable=false, Namespace="http://schemas.microsoft.com/exchange/services/2006/types")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlArrayItem("RecurringMasterItemIdRanges", typeof(ExchangeWebServices.RecurringMasterItemIdRangesType), IsNullable=false, Namespace="http://schemas.microsoft.com/exchange/services/2006/types")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlArrayItem("OccurrenceItemId", typeof(ExchangeWebServices.OccurrenceItemIdType), IsNullable=false, Namespace="http://schemas.microsoft.com/exchange/services/2006/types")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlArrayItem("ItemId", typeof(ExchangeWebServices.ItemIdType), IsNullable=false, Namespace="http://schemas.microsoft.com/exchange/services/2006/types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ExchangeWebServices.BaseItemIdType[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e75b-105">
            <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> Свойство получает или задает коллекцию элементов для получения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-105">The <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> property gets or sets the collection of items to get.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e75b-106">
            <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> Возвращает свойство <see cref="T:ExchangeWebServices.BaseItemIdType" /> массив, содержащий идентификаторы всех элементов, которые требуется получить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-106">The <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> property returns a <see cref="T:ExchangeWebServices.BaseItemIdType" /> array that contains the identifiers of all the items to get.</span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="2e75b-107">
            <para>
              <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> Свойство <see cref="T:ExchangeWebServices.ItemIdType" /> типа.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-107">
              <para>The <see cref="P:ExchangeWebServices.GetItemType.ItemIds" /> property is set with an <see cref="T:ExchangeWebServices.ItemIdType" /> type.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemShape">
      <MemberSignature Language="C#" Value="public ExchangeWebServices.ItemResponseShapeType ItemShape { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ExchangeWebServices.ItemResponseShapeType ItemShape" />
      <MemberSignature Language="DocId" Value="P:ExchangeWebServices.GetItemType.ItemShape" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemShape As ItemResponseShapeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ExchangeWebServices::ItemResponseShapeType ^ ItemShape { ExchangeWebServices::ItemResponseShapeType ^ get(); void set(ExchangeWebServices::ItemResponseShapeType ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EWS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ExchangeWebServices.ItemResponseShapeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e75b-108">
            <see cref="P:ExchangeWebServices.GetItemType.ItemShape" /> Свойство получает или задает форму ответа GetItem ответа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-108">The <see cref="P:ExchangeWebServices.GetItemType.ItemShape" /> property gets or sets the response shape of the GetItem response.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e75b-109">
            <see cref="P:ExchangeWebServices.GetItemType.ItemShape" /> Возвращает свойство <see cref="T:ExchangeWebServices.ItemResponseShapeType" /> объекта, который описывает свойства, возвращаемые в ответ GetItem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e75b-109">The <see cref="P:ExchangeWebServices.GetItemType.ItemShape" /> property returns an <see cref="T:ExchangeWebServices.ItemResponseShapeType" /> object that describes the properties that are returned in a GetItem response.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>